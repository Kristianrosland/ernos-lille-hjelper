{"version":3,"sources":["cases/DD1a.png","app.less","cases/UL1a.png","cases/UR1b.png","cases/UU4b.png","cases/UL5a.png","cases/UR5a.png","cases/UR5b.png","cases/DR5a.png","cases/UL5b.png","cases/DD5b.png","cases/DD4a.png","cases.js","Search.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","src","UL1a","name","alg","UR1b","UU4b","UL5a","UL5b","DD1a","UR5a","UR5b","DR5a","DD5b","DD4a","next","Search","setQuizMode","useState","query","setQuery","currentCases","setCurrentCases","handleKeys","onKeyEvent","value","onChange","e","inp","target","toUpperCase","length","matches","cases","filter","c","startsWith","className","css","queryInput","map","key","image","alt","App","container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,UAAY,kBAAkB,WAAa,mBAAmB,MAAQ,gB,oBCDxFD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,wVCa5B,GACb,CACEC,IAAKC,IACLC,KAAM,OACNC,IAAK,8BAEP,CACEH,IAAKI,IACLF,KAAM,OACNC,IAAK,gCAEP,CACEH,IAAKK,IACLH,KAAM,OACNC,IAAK,yCAEP,CACEH,IAAKM,IACLJ,KAAM,OACNC,IAAK,6BAEP,CACEH,IAAKO,IACLL,KAAM,OACNC,IAAK,8BAEP,CACEH,IAAKQ,IACLN,KAAM,OACNC,IAAK,2BAEP,CACEH,IAAKS,IACLP,KAAM,OACNC,IAAK,0BAEP,CACEH,IAAKU,IACLR,KAAM,OACNC,IAAK,2BAEP,CACEH,IAAKW,IACLT,KAAM,OACNC,IAAK,sCAEP,CACEH,IAAKY,IACLV,KAAM,OACNC,IAAK,IAEP,CACEH,IAAKa,IACLX,KAAM,OACNC,IAAK,4BAEP,CACEH,IAAKc,IACLZ,KAAM,QAER,CACEF,IAAKc,IACLZ,KAAM,S,gBC5CKa,EA1BA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACRC,mBAAS,IADD,mBAC3BC,EAD2B,KACpBC,EADoB,OAEMF,mBAAS,IAFf,mBAE3BG,EAF2B,KAEbC,EAFa,KAelC,OACE,oCACE,kBAAC,IAAD,CAAsBC,WAAY,CAAC,KAAMC,WAAYP,IACrD,2BAAOQ,MAAON,EAAOO,SAdR,SAACC,GAChB,IAAMC,EAAMD,EAAEE,OAAOJ,MAAMK,cAG3B,GAFAV,EAASQ,GAEU,IAAfA,EAAIG,OAAc,CACpB,IAAMC,EAAUC,EAAMC,QAAO,SAACC,GAAD,OAAOA,EAAEhC,KAAKiC,WAAWR,MACtDN,EAAgBU,GAChBZ,EAAS,MAOgCiB,UAAWC,IAAIC,aACvDlB,EAAamB,KAAI,SAACL,GAAD,OAChB,yBAAKM,IAAKN,EAAEhC,KAAMF,IAAKkC,EAAElC,IAAKoC,UAAWC,IAAII,MAAOC,IAAI,kBCbjDC,EARH,WACV,OACE,yBAAKP,UAAWC,IAAIO,WAClB,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6be052f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DD1a.42a5250c.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_2-jk-\",\"queryInput\":\"queryInput_9HdQc\",\"image\":\"image_1hKqg\"};","module.exports = __webpack_public_path__ + \"static/media/UL1a.137fcb5f.png\";","module.exports = __webpack_public_path__ + \"static/media/UR1b.0de51f6b.png\";","module.exports = __webpack_public_path__ + \"static/media/UU4b.a4f90bee.png\";","module.exports = __webpack_public_path__ + \"static/media/UL5a.17a229fd.png\";","module.exports = __webpack_public_path__ + \"static/media/UR5a.b4cb91ea.png\";","module.exports = __webpack_public_path__ + \"static/media/UR5b.3af93687.png\";","module.exports = __webpack_public_path__ + \"static/media/DR5a.c6815c41.png\";","module.exports = __webpack_public_path__ + \"static/media/UL5b.88630ad9.png\";","module.exports = __webpack_public_path__ + \"static/media/DD5b.8523dd28.png\";","module.exports = __webpack_public_path__ + \"static/media/DD4a.7e40e810.png\";","import UL1a from \"./cases/UL1a.png\";\nimport UR1b from \"./cases/UR1b.png\";\nimport UU4b from \"./cases/UU4b.png\";\nimport UL5a from \"./cases/UL5a.png\";\nimport DD1a from \"./cases/DD1a.png\";\nimport UR5a from \"./cases/UR5a.png\";\nimport UR5b from \"./cases/UR5b.png\";\nimport DR5a from \"./cases/DR5a.png\";\nimport UL5b from \"./cases/UL5b.png\";\nimport next from \"./cases/DD1a.png\";\nimport DD5b from \"./cases/DD5b.png\";\nimport DD4a from \"./cases/DD4a.png\";\n\nexport default [\n  {\n    src: UL1a,\n    name: \"UL1a\",\n    alg: \"y' U (R' U R U') (R' U' R)\",\n  },\n  {\n    src: UR1b,\n    name: \"UR1b\",\n    alg: \"y' U (R' U2 R) U' y (R U R')\",\n  },\n  {\n    src: UU4b,\n    name: \"UU4b\",\n    alg: \"y' U' (R' U R U) (R' U R U') (R' U R)\",\n  },\n  {\n    src: UL5a,\n    name: \"UL5a\",\n    alg: \"(U' R U' R') U2 (R U' R')\",\n  },\n  {\n    src: UL5b,\n    name: \"UL5b\",\n    alg: \"(U' R U R') U y' (R' U' R)\",\n  },\n  {\n    src: DD1a,\n    name: \"DD1a\",\n    alg: \"U (R U' R') U' (F' U F)\",\n  },\n  {\n    src: UR5a,\n    name: \"UR5a\",\n    alg: \"U (R U R') U2 (R U R')\",\n  },\n  {\n    src: UR5b,\n    name: \"UR5b\",\n    alg: \"U (F' U' F) U' (R U R')\",\n  },\n  {\n    src: DR5a,\n    name: \"DR5a\",\n    alg: \"(R U' R' U) (R U2' R') U (R U' R')\",\n  },\n  {\n    src: DD5b,\n    name: \"DD5b\",\n    alg: \"\",\n  },\n  {\n    src: DD4a,\n    name: \"DD4a\",\n    alg: \"U' F' (R U R' U') R' F R\",\n  },\n  {\n    src: next,\n    name: \"next\",\n  },\n  {\n    src: next,\n    name: \"next\",\n  },\n];\n","import React, { useState } from \"react\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\nimport cases from \"./cases\";\nimport css from \"./app.less\";\n\nconst Search = ({ setQuizMode }) => {\n  const [query, setQuery] = useState(\"\");\n  const [currentCases, setCurrentCases] = useState([]);\n\n  const onChange = (e) => {\n    const inp = e.target.value.toUpperCase();\n    setQuery(inp);\n\n    if (inp.length === 3) {\n      const matches = cases.filter((c) => c.name.startsWith(inp));\n      setCurrentCases(matches);\n      setQuery(\"\");\n    }\n  };\n\n  return (\n    <>\n      <KeyboardEventHandler handleKeys={[\"q\"]} onKeyEvent={setQuizMode} />\n      <input value={query} onChange={onChange} className={css.queryInput} />\n      {currentCases.map((c) => (\n        <img key={c.name} src={c.src} className={css.image} alt=\"Solution\" />\n      ))}\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport Search from \"./Search\";\nimport css from \"./app.less\";\n\nconst App = () => {\n  return (\n    <div className={css.container}>\n      <Search />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}