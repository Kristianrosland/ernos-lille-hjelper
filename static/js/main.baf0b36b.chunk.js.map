{"version":3,"sources":["cube-timer/cube-timer.less","algorithms/algorithms.less","algorithms/cases/DD1a.png","algorithms/cases/DD4a.png","algorithms/cases/DD5b.png","algorithms/cases/DR5a.png","algorithms/cases/UL1a.png","algorithms/cases/UL5a.png","algorithms/cases/UL5b.png","algorithms/cases/UR1b.png","algorithms/cases/UR5a.png","algorithms/cases/UR5b.png","algorithms/cases/UU4b.png","cube-timer/Timer.tsx","App.tsx","algorithms/cases.ts","algorithms/Algorithms.tsx","cube-timer/Scramble.tsx","cube-timer/CubeTimer.tsx","firebase-utils.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","interval","auth","solveDbCollection","cases","src","UL1a","name","alg","UR1b","UU4b","UL5a","UL5b","DD1a","UR5a","UR5b","DR5a","DD5b","DD4a","Algorithms","useState","query","setQuery","currentCases","setCurrentCases","className","css","container","value","onChange","e","inp","target","toUpperCase","length","matches","filter","c","startsWith","queryInput","map","key","image","alt","Scramble","newScramble","showScramble","currentScramble","setCurrentScramble","previousScramble","setPreviousScramble","useEffect","scrambleContainer","scramble","leadingZero","input","slice","now","Date","getTime","formatTimer","time","minutes","Math","floor","seconds","milliseconds","Timer","timerRunning","onToggleTimerRunning","onNewScramble","addSolve","solves","startTime","setStartTime","formattedSolveTime","setFormattedSolveTime","solveTime","setSolveTime","holding","setHolding","setInterval","clearInterval","stopTimer","buttonClassNames","classNames","startButton","previousSolves","startHold","stopHold","timerContainer","largeTimer","onClick","timer","leftHand","onMouseUp","onMouseDown","onTouchStart","onTouchEnd","previousSolve","index","handleKeys","onKeyEvent","handleEventType","newScramle","scrambleGenerator","CubeTimer","setTimerRunning","setScramble","useContext","DataContext","sessionSolves","addNewSolve","cubeTimerContainer","timestamp","solveConverter","toFirestore","solve","fromFirestore","snapshot","options","data","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthContext","React","createContext","storedSolves","removeStoredSolve","App","user","isLoading","authState","setAuthState","dataState","setDataState","onAuthStateChanged","undefined","firestore","collection","doc","uid","withConverter","onSnapshot","prev","docs","id","Provider","set","delete","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.baf0b36b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cubeTimerContainer\":\"cubeTimerContainer_Ay0n8\",\"scrambleContainer\":\"scrambleContainer_1a119\",\"scramble\":\"scramble_34LiX\",\"previousScramble\":\"previousScramble_2GkcP\",\"timerContainer\":\"timerContainer_2V7Gk\",\"solves\":\"solves_36Clh\",\"timer\":\"timer_txBap\",\"holding\":\"holding_pWB_3\",\"time\":\"time_8_DXF\",\"largeTimer\":\"largeTimer_2BxXc\",\"previousSolves\":\"previousSolves_1FCIY\",\"startButton\":\"startButton_vAJGC\",\"handButtonsAndSolveTimeContainer\":\"handButtonsAndSolveTimeContainer_yMfb8\",\"leftHand\":\"leftHand_7QfGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_23up_\",\"queryInput\":\"queryInput_g6eat\",\"image\":\"image_2atOG\"};","module.exports = __webpack_public_path__ + \"static/media/DD1a.42a5250c.png\";","module.exports = __webpack_public_path__ + \"static/media/DD4a.7e40e810.png\";","module.exports = __webpack_public_path__ + \"static/media/DD5b.8523dd28.png\";","module.exports = __webpack_public_path__ + \"static/media/DR5a.c6815c41.png\";","module.exports = __webpack_public_path__ + \"static/media/UL1a.137fcb5f.png\";","module.exports = __webpack_public_path__ + \"static/media/UL5a.17a229fd.png\";","module.exports = __webpack_public_path__ + \"static/media/UL5b.88630ad9.png\";","module.exports = __webpack_public_path__ + \"static/media/UR1b.0de51f6b.png\";","module.exports = __webpack_public_path__ + \"static/media/UR5a.b4cb91ea.png\";","module.exports = __webpack_public_path__ + \"static/media/UR5b.3af93687.png\";","module.exports = __webpack_public_path__ + \"static/media/UU4b.a4f90bee.png\";","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { Solve } from '../types/solve-types';\nimport css from './cube-timer.less';\n\nlet interval: NodeJS.Timeout | undefined;\n\nconst leadingZero = (input: number) => ('0' + input).slice(-2);\n\nexport const now = (): number => new Date().getTime();\n\nconst formatTimer = (time: number) => {\n    const minutes = Math.floor(time / 60000);\n    const seconds = Math.floor(time / 1000) % 60;\n    const milliseconds = Math.floor((time % 1000) / 10);\n\n    return `${minutes > 0 ? minutes + ':' : ''}${minutes > 0 ? leadingZero(seconds) : seconds}.${leadingZero(\n        milliseconds,\n    )}`;\n};\n\ninterface TimerProps {\n    timerRunning: boolean;\n    onToggleTimerRunning: (running: boolean) => void;\n    onNewScramble: () => void;\n    solves: Solve[];\n    addSolve: (solveTime: number) => void;\n}\n\nconst Timer: React.FC<TimerProps> = ({ timerRunning, onToggleTimerRunning, onNewScramble, addSolve, solves }) => {\n    const [startTime, setStartTime] = useState<number | undefined>();\n    const [formattedSolveTime, setFormattedSolveTime] = useState<string>('0.00');\n    const [solveTime, setSolveTime] = useState<number>(0);\n    const [holding, setHolding] = useState(false);\n\n    useEffect(() => {\n        if (timerRunning) {\n            interval = setInterval(() => {\n                setSolveTime(now() - (startTime ?? 0));\n            }, 10);\n        } else {\n            if (interval) {\n                clearInterval(interval);\n            }\n        }\n\n        if (interval) {\n            return () => clearInterval(interval!);\n        }\n\n        return;\n    }, [timerRunning]);\n\n    const startTimer = () => {\n        if (timerRunning) {\n            return;\n        }\n\n        setStartTime(now());\n        onToggleTimerRunning(true);\n    };\n\n    const stopTimer = () => {\n        onToggleTimerRunning(false);\n\n        if (solveTime !== 0) {\n            setFormattedSolveTime(formatTimer(solveTime));\n            addSolve(solveTime);\n        }\n\n        onNewScramble();\n    };\n\n    const buttonClassNames = classNames(css.startButton, { [css.holding]: holding });\n    const previousSolves = solves.slice(1);\n\n    const startHold = () => {\n        setHolding(true);\n        if (!timerRunning) {\n            setSolveTime(0);\n        }\n    };\n\n    const stopHold = () => {\n        setHolding(false);\n        if (timerRunning) {\n            stopTimer();\n        } else {\n            startTimer();\n        }\n    };\n\n    return (\n        <div className={css.timerContainer}>\n            {timerRunning ? (\n                <div\n                    className={css.largeTimer}\n                    onClick={() => {\n                        stopTimer();\n                    }}\n                >\n                    <span className={classNames(css.timer, css.time)}>{formatTimer(solveTime)}</span>\n                </div>\n            ) : (\n                <>\n                    <div className={buttonClassNames}>\n                        <i className={classNames('fas fa-hand-paper', css.leftHand)} />\n                    </div>\n                    <div className={css.solves}>\n                        <span\n                            className={classNames(css.timer, css.time, { [css.holding]: holding })}\n                            onMouseUp={stopHold}\n                            onMouseDown={startHold}\n                            onTouchStart={startHold}\n                            onTouchEnd={stopHold}\n                        >\n                            {formattedSolveTime}\n                        </span>\n\n                        <div className={classNames(css.previousSolves, css.time)}>\n                            {previousSolves.map((previousSolve, index) => (\n                                <span key={index}>{formatTimer(previousSolve.time)}</span>\n                            ))}\n                        </div>\n                    </div>\n                    <div className={buttonClassNames}>\n                        <i className=\"fas fa-hand-paper\" />\n                    </div>\n                </>\n            )}\n            <KeyboardEventHandler handleKeys={['space']} onKeyEvent={startHold} />\n            <KeyboardEventHandler handleKeys={['space']} handleEventType={'keyup'} onKeyEvent={stopHold} />\n        </div>\n    );\n};\n\nexport default Timer;\n","import firebase, { firestore } from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport React, { useEffect, useState } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Algorithms from './algorithms/Algorithms';\nimport CubeTimer from './cube-timer/CubeTimer';\nimport { config, solveConverter } from './firebase-utils';\nimport { Solve } from './types/solve-types';\n\nfirebase.initializeApp(config);\nlet auth: firebase.auth.Auth | undefined;\nlet solveDbCollection: firestore.CollectionReference | undefined;\n\nexport const AuthContext = React.createContext<AuthState | null>(null);\nexport const DataContext = React.createContext<DataState & DataStateModifiers>({\n    sessionSolves: [],\n    storedSolves: [],\n    addNewSolve: () => {},\n    removeStoredSolve: () => {},\n});\n\ninterface DataState {\n    sessionSolves: Solve[];\n    storedSolves: (Solve & { id: string })[];\n}\n\ninterface DataStateModifiers {\n    addNewSolve: (solve: Solve) => void;\n    removeStoredSolve: (id: string) => void;\n}\n\ninterface AuthState {\n    user: firebase.User | null;\n    isLoading: boolean;\n}\n\nconst App = () => {\n    const [authState, setAuthState] = useState<AuthState>({ user: null, isLoading: true });\n    const [dataState, setDataState] = useState<DataState>({\n        sessionSolves: [],\n        storedSolves: [],\n    });\n\n    const addNewSolve = (solve: Solve) => {\n        setDataState(prev => ({ ...prev, sessionSolves: [solve, ...prev.sessionSolves] }));\n\n        if (authState.user) {\n            solveDbCollection?.doc().set(solve);\n        }\n    };\n\n    const removeStoredSolve = (id: string) => {\n        if (authState.user) {\n            solveDbCollection?.doc(id).delete();\n        }\n    };\n\n    useEffect(() => {\n        if (!auth) {\n            auth = firebase.auth();\n\n            auth.onAuthStateChanged(user => {\n                setAuthState({ user, isLoading: false });\n\n                if (user === null) {\n                    solveDbCollection = undefined;\n                } else {\n                    solveDbCollection = firebase\n                        .firestore()\n                        .collection('solves')\n                        .doc(user.uid)\n                        .withConverter(solveConverter)\n                        .collection('all_solves');\n\n                    solveDbCollection.onSnapshot(snapshot => {\n                        setDataState(prev => ({\n                            ...prev,\n                            storedSolves: snapshot.docs.map(doc => ({ ...(doc.data() as Solve), id: doc.id })),\n                        }));\n                    });\n                }\n            });\n        }\n    }, []);\n\n    return (\n        <AuthContext.Provider value={authState}>\n            <DataContext.Provider value={{ ...dataState, addNewSolve, removeStoredSolve }}>\n                <HashRouter>\n                    <Route exact={true} path=\"/\" component={CubeTimer} />\n                    <Route path=\"/algorithms\" component={Algorithms} />\n                </HashRouter>\n            </DataContext.Provider>\n        </AuthContext.Provider>\n    );\n};\n\nexport default App;\n","import DD1a from './cases/DD1a.png';\nimport DD4a from './cases/DD4a.png';\nimport DD5b from './cases/DD5b.png';\nimport DR5a from './cases/DR5a.png';\nimport UL1a from './cases/UL1a.png';\nimport UL5a from './cases/UL5a.png';\nimport UL5b from './cases/UL5b.png';\nimport UR1b from './cases/UR1b.png';\nimport UR5a from './cases/UR5a.png';\nimport UR5b from './cases/UR5b.png';\nimport UU4b from './cases/UU4b.png';\n\nexport interface F2LCase {\n    src: string;\n    name: string;\n    alg: string;\n}\n\nconst cases: F2LCase[] = [\n    {\n        src: UL1a,\n        name: 'UL1a',\n        alg: \"y' U (R' U R U') (R' U' R)\",\n    },\n    {\n        src: UR1b,\n        name: 'UR1b',\n        alg: \"y' U (R' U2 R) U' y (R U R')\",\n    },\n    {\n        src: UU4b,\n        name: 'UU4b',\n        alg: \"y' U' (R' U R U) (R' U R U') (R' U R)\",\n    },\n    {\n        src: UL5a,\n        name: 'UL5a',\n        alg: \"(U' R U' R') U2 (R U' R')\",\n    },\n    {\n        src: UL5b,\n        name: 'UL5b',\n        alg: \"(U' R U R') U y' (R' U' R)\",\n    },\n    {\n        src: DD1a,\n        name: 'DD1a',\n        alg: \"U (R U' R') U' (F' U F)\",\n    },\n    {\n        src: UR5a,\n        name: 'UR5a',\n        alg: \"U (R U R') U2 (R U R')\",\n    },\n    {\n        src: UR5b,\n        name: 'UR5b',\n        alg: \"U (F' U' F) U' (R U R')\",\n    },\n    {\n        src: DR5a,\n        name: 'DR5a',\n        alg: \"(R U' R' U) (R U2' R') U (R U' R')\",\n    },\n    {\n        src: DD5b,\n        name: 'DD5b',\n        alg: '',\n    },\n    {\n        src: DD4a,\n        name: 'DD4a',\n        alg: \"U' F' (R U R' U') R' F R\",\n    },\n];\n\nexport default cases;\n","import React, { ChangeEvent, useState } from 'react';\nimport css from './algorithms.less';\nimport cases, { F2LCase } from './cases';\n\nconst Algorithms = () => {\n    const [query, setQuery] = useState('');\n    const [currentCases, setCurrentCases] = useState<F2LCase[]>([]);\n\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const inp = e.target.value.toUpperCase();\n        setQuery(inp);\n\n        if (inp.length === 3) {\n            const matches = cases.filter(c => c.name.startsWith(inp));\n            setCurrentCases(matches);\n            setQuery('');\n        }\n    };\n\n    return (\n        <div className={css.container}>\n            <input value={query} onChange={onChange} className={css.queryInput} />\n            {currentCases.map(c => (\n                <img key={c.name} src={c.src} className={css.image} alt=\"Solution\" />\n            ))}\n        </div>\n    );\n};\n\nexport default Algorithms;\n","import React, { useEffect, useState } from 'react';\nimport css from './cube-timer.less';\n\ninterface Props {\n    newScramble: string;\n    showScramble: boolean;\n}\n\nconst Scramble: React.FC<Props> = ({ newScramble, showScramble }) => {\n    const [currentScramble, setCurrentScramble] = useState<string>();\n    const [previousScramble, setPreviousScramble] = useState<string>();\n\n    useEffect(() => {\n        if (newScramble !== currentScramble) {\n            setPreviousScramble(currentScramble);\n            setCurrentScramble(newScramble);\n        }\n    }, [newScramble, currentScramble, setPreviousScramble]);\n\n    return (\n        <>\n            {showScramble && (\n                <div className={css.scrambleContainer}>\n                    <div className={css.scramble}>{currentScramble}</div>\n                    {currentScramble && <div className={css.previousScramble}>{previousScramble}</div>}\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Scramble;\n","import React, { useContext, useState } from 'react';\nimport scrambleGenerator from 'rubiks-cube-scramble';\nimport { DataContext } from '../App';\nimport css from './cube-timer.less';\nimport Scramble from './Scramble';\nimport Timer, { now } from './Timer';\n\nconst newScramle = (): string => scrambleGenerator() as string;\n\nconst CubeTimer = () => {\n    const [timerRunning, setTimerRunning] = useState(false);\n    const [scramble, setScramble] = useState<string>(newScramle());\n    const { sessionSolves, addNewSolve } = useContext(DataContext);\n\n    return (\n        <div className={css.cubeTimerContainer}>\n            <Scramble newScramble={scramble} showScramble={!timerRunning} />\n\n            <Timer\n                timerRunning={timerRunning}\n                onToggleTimerRunning={setTimerRunning}\n                onNewScramble={() => setScramble(newScramle)}\n                solves={sessionSolves}\n                addSolve={solveTime => addNewSolve({ time: solveTime, timestamp: now(), scramble })}\n            />\n        </div>\n    );\n};\n\nexport default CubeTimer;\n","import { Solve } from './types/solve-types';\n\nexport const solveConverter = {\n    toFirestore: (solve: Solve) => ({\n        time: solve.time,\n        timestamp: solve.timestamp,\n        scramble: solve.scramble,\n    }),\n    fromFirestore: (snapshot: any, options: any): Solve => {\n        const data = snapshot.data(options);\n        return { time: data.time, timestamp: data.timestamp, scramble: data.scramble };\n    },\n};\n\nexport const config = {\n    apiKey: 'AIzaSyAW_PdA6o5ygKubwsxaQfJ22dgWE5fA41U',\n    authDomain: 'cubeguru-79b7d.firebaseapp.com',\n    databaseURL: 'https://cubeguru-79b7d.firebaseio.com',\n    projectId: 'cubeguru-79b7d',\n    storageBucket: 'cubeguru-79b7d.appspot.com',\n    messagingSenderId: '1042814909264',\n    appId: '1:1042814909264:web:e79fa88d14f9f4669c4a55',\n    measurementId: 'G-Z2GMHWJ2NG',\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}